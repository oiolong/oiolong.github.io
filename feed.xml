<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>allen&#39;s notes</title>
    <description>about blog Google search results) and in your feed.xml site description. 
</description>
    <link>http://oiolong.github.io//</link>
    <atom:link href="http://oiolong.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 03 Nov 2015 16:38:05 +0800</pubDate>
    <lastBuildDate>Tue, 03 Nov 2015 16:38:05 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>快速搬服务器的笔记</title>
        <description>&lt;p&gt;serverA to serverB&lt;/p&gt;

&lt;p&gt;login to serverA&lt;/p&gt;

&lt;h1 id=&quot;rsync-dirs&quot;&gt;1 rsync dirs&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;rsync -av /home/* root@serverB:/home/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;rsync-php--nginx&quot;&gt;2 rsync php &amp;amp; nginx&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;rsync -av /usr/local/lib/php serverB:/usr/local/lib/
rsync -av /usr/local/php serverB:/usr/local/
rsync -av /usr/local/sbin/php-fpm serverB:/usr/local/sbin/php-fpm
rsync -av /usr/local/etc/php-fpm.conf serverB:/usr/local/etc/php-fpm.conf
rsync -av /etc/init.d/php-fpm serverB:/etc/init.d/php-fpm
rsync -av /usr/local/var serverB:/usr/local/
rsync -av /usr/local/webserver serverB:/usr/local/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;backu-mysql&quot;&gt;3 backu mysql&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/innobackupex --user=root --password=&#39;pw&#39; /$dir --no-timestamp  
 	/usr/bin/innobackupex --user=root --password=&#39;pw&#39; --apply-log /$dir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;login to serverB&lt;/p&gt;

&lt;h1 id=&quot;yum-libs&quot;&gt;4 yum libs&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;yum install make libjpeg-devel.x86_64 libpng-devel.x86_64 pcre-devel.x86_64 libxml2-devel.x86_64 openssl-devel.x86_64 curl-devel.x86_64 gd.x86_64 libXpm-devel.x86_64 gd-devel.x86_64 curl-devel.x86_64 libidn.x86_64 libidn-devel.x86_64 autoconf.noarch gcc.x86_64 vim-enhanced.x86_64 screen.x86_64 ntp.x86_64 libxml2-devel.x86_64 openssl-devel.x86_64 curl-devel.x86_64 libmcrypt-devel.x86_64 mhash-devel.x86_64 libevent-devel.x86_64 libcurl-devel.x86_64 git gcc-c++ pcre-dev pcre-devel zlib-devel make tcl-devel.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;yum-percona&quot;&gt;5 yum percona&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;yum install Percona-Server-client-55 Percona-Server-server-55 percona-xtrabackup
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;copy-back-mysql&quot;&gt;6 copy back mysql&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;innobackupex --copy-back /$dbdir
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;link-mysqlsock&quot;&gt;7 link mysql.sock&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;ln -sf /var/lib/mysql/mysql.sock /tmp/mysql.sock
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Thu, 15 Jan 2015 00:09:57 +0800</pubDate>
        <link>http://oiolong.github.io//linux/2015/01/15/move-from-one-server-to-another-quickly.html</link>
        <guid isPermaLink="true">http://oiolong.github.io//linux/2015/01/15/move-from-one-server-to-another-quickly.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>码农周刊2014技术干货</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;【年终特刊】2014 年最受欢迎的技术干货&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;码农周刊第56期（2014-12-29）&lt;/h2&gt;

&lt;p&gt;2014 年最后一期《码农周刊》，我们精选了往期最受欢迎的技术干货，希望各位喜欢。&lt;/p&gt;

&lt;p&gt;过去的一年，感谢用户、客户们一如既往地支持。爱你们！&lt;/p&gt;

&lt;p&gt;我们的新产品：&lt;a href=&quot;http://toutiao.io/&amp;amp;aid=1497&amp;amp;nid=56&quot;&gt;开发者头条 toutiao.io&lt;/a&gt; ，欢迎支持。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.coding.net/blog/why-coding-does-not-equals-github&amp;amp;aid=1762&amp;amp;nid=56&quot;&gt;为什么Coding 不是中国版 GitHub？&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;特别推荐&lt;/h3&gt;

&lt;h4 id=&quot;httpsgithubcomnemotyrantmanongampaid1762ampnid56&quot;&gt;&lt;a href=&quot;https://github.com/nemoTyrant/manong&amp;amp;aid=1762&amp;amp;nid=56&quot;&gt;《码农周刊》分类整理&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;再次感谢 &lt;a href=&quot;http://weibo.com/u/1265894615&quot;&gt;@nemothetyrant&lt;/a&gt; 同学的辛苦整理，目前已同步至第 54 期。Star 数已过 1200，欢迎关注。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;最受欢迎的技术干货（程序设计篇）&lt;/h3&gt;

&lt;h4 id=&quot;httpwwwbitstechnet20140107log-best-practiceampaid393&quot;&gt;&lt;a href=&quot;http://www.bitstech.net/2014/01/07/log-best-practice/&amp;amp;aid=393&quot;&gt;最佳日志实践（王健）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;日志看似小事，实则运维的大事。via &lt;a href=&quot;http://weibo.com/breezes&quot;&gt;@网易汪源&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;httpcoolshellcnarticles10910htmlampaid423ampnid56&quot;&gt;&lt;a href=&quot;http://coolshell.cn/articles/10910.html&amp;amp;aid=423&amp;amp;nid=56&quot;&gt;分布式系统的事务处理（@左耳朵耗子）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文系统地介绍了用于处理分布式数据一致性的技术模型，如：Master-Slave、Master-Master、2PC/3PC、经典的将军问题、Paxos 以及 Dynamo 的 NRW 和 VectorClock 的模型。&lt;/p&gt;

&lt;h4 id=&quot;httpblogcodingnowcom201403mmzbdbhtmlampaid647ampnid56&quot;&gt;&lt;a href=&quot;http://blog.codingnow.com/2014/03/mmzb_db.html&amp;amp;aid=647&amp;amp;nid=56&quot;&gt;系列文章：谈谈陌陌争霸在数据库方面踩过的坑（@简悦云风）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;此为前篇，另外三篇：&lt;a href=&quot;http://blog.codingnow.com/2014/03/mmzb_db_2.html&quot;&gt;排行榜篇&lt;/a&gt;、&lt;a href=&quot;http://blog.codingnow.com/2014/03/mmzb_mongodb.html&quot;&gt;MongoDB 篇&lt;/a&gt;和 &lt;a href=&quot;http://blog.codingnow.com/2014/03/mmzb_redis.html&quot;&gt;Redis 篇&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;whatsapp-httphighscalabilitycomblog2014331how-whatsapp-grew-to-nearly-500-million-users-11000-cores-anhtmlampaid868ampnid56&quot;&gt;&lt;a href=&quot;http://highscalability.com/blog/2014/3/31/how-whatsapp-grew-to-nearly-500-million-users-11000-cores-an.html&amp;amp;aid=868&amp;amp;nid=56&quot;&gt;WhatsApp 架构设计（最新版）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;来自 High Scalability。相较&lt;a href=&quot;http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html&quot;&gt;上篇&lt;/a&gt;，这篇内容更新、更全。&lt;a href=&quot;http://www.csdn.net/article/2014-04-04/2819158-how-whatsapp-grew-to-nearly-500-million-users-11000-cores-an&quot;&gt;译文&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;pdf-linux--eduardo-ciliendo-amp-takechika-kunimasahttpwwwredbooksibmcomredpaperspdfsredp4285pdfampaid1164ampnid56&quot;&gt;&lt;a href=&quot;http://www.redbooks.ibm.com/redpapers/pdfs/redp4285.pdf&amp;amp;aid=1164&amp;amp;nid=56&quot;&gt;[PDF] Linux 性能及调优指南 (Eduardo Ciliendo &amp;amp; Takechika Kunimasa)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;IBM 出品，不算新，但足够经典。感谢 &lt;a href=&quot;http://weibo.com/u/2216172320&quot;&gt;@何_登成&lt;/a&gt; 的分享。&lt;/p&gt;

&lt;h4 id=&quot;httpblogaliyuncom967ampaid1212ampnid56&quot;&gt;&lt;a href=&quot;http://blog.aliyun.com/967&amp;amp;aid=1212&amp;amp;nid=56&quot;&gt;图片服务架构演进（孔凡勇）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;从传统互联网的 Web 1.0，历经 Web 2.0 时代以及发展到现在的 Web 3.0，随着图片存储规模的增加，图片服务器的架构也在逐渐发生变化。（感谢 &lt;a href=&quot;http://weibo.com/p/1005051750122417&quot;&gt;@aliyun-云狄&lt;/a&gt; 投稿）&lt;/p&gt;

&lt;h4 id=&quot;stackoverflow-httpwwwcsdnnetarticle2014-07-222820774-stackoverflow-update-560m-pageviews-a-month-25-serversampaid1269ampnid56&quot;&gt;&lt;a href=&quot;http://www.csdn.net/article/2014-07-22/2820774-stackoverflow-update-560m-pageviews-a-month-25-servers&amp;amp;aid=1269&amp;amp;nid=56&quot;&gt;[译] 25 台服务器是怎样支撑 StackOverflow 的？（仲浩）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;StackOverflow 是程序员必上的网站之一，本文介绍了它的架构设计。&lt;a href=&quot;http://highscalability.com/blog/2014/7/21/stackoverflow-update-560m-pageviews-a-month-25-servers-and-i.html&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;pdf-httpvdiskweibocomsq8fzmjo4w2qqampaid1356ampnid56&quot;&gt;&lt;a href=&quot;http://vdisk.weibo.com/s/q8FZMJO4W2qq&amp;amp;aid=1356&amp;amp;nid=56&quot;&gt;[PDF] 蔡学镛架构设计方法（最新版）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;有用有料，下载过万。&lt;/p&gt;

&lt;h4 id=&quot;heroku--http-api-httpwwwinfoqcomcnnews201409heroku-http-design-guideampaid1394ampnid56&quot;&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2014/09/heroku-http-design-guide&amp;amp;aid=1394&amp;amp;nid=56&quot;&gt;[译] Heroku 的 HTTP API 设计指南（赵震一）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这份&lt;a href=&quot;https://github.com/interagent/http-api-design&quot;&gt;设计指南&lt;/a&gt;很火，GitHub 上 Star 数已过 6000。&lt;/p&gt;

&lt;h4 id=&quot;pdf--mysql--httpvdiskweibocomsvxkr-hwxrnij1414422630ampaid1555ampnid56&quot;&gt;&lt;a href=&quot;http://vdisk.weibo.com/s/vxKR-hwXRnIj/1414422630&amp;amp;aid=1555&amp;amp;nid=56&quot;&gt;[PDF] 一步到位实现 MySQL 优化 (@叶金荣)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;从硬件、系统、配置、设计等多角度优化 MySQL&lt;/p&gt;

&lt;h4 id=&quot;httpwwwcsdnnetarticle2014-11-042822459ampaid1628ampnid56&quot;&gt;&lt;a href=&quot;http://www.csdn.net/article/2014-11-04/2822459&amp;amp;aid=1628&amp;amp;nid=56&quot;&gt;电商峰值系统架构设计 (@程序员杂志)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;来自京东、当当、小米等电商的最佳技术实践分享&lt;/p&gt;

&lt;h4 id=&quot;lucida--penggonghttpzhlucidamebloglucida-pinyin-converterampaid1711ampnid56&quot;&gt;&lt;a href=&quot;http://zh.lucida.me/blog/lucida-pinyin-converter/&amp;amp;aid=1711&amp;amp;nid=56&quot;&gt;从 2000 毫秒到 10 毫秒——Lucida 拼音库的设计与实现 (@peng_gong)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Lucida 拼音库以微软拼音库为基础，能够快速的把汉字转化为对应的拼音，它比微软拼音库快 200 多倍，同时占用内存不到微软拼音库的八分之一。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;最受欢迎的技术干货（编程语言篇）&lt;/h3&gt;

&lt;h4 id=&quot;scala-yankayhttpzhscala-tourcomampaid404ampnid56&quot;&gt;&lt;a href=&quot;http://zh.scala-tour.com/&amp;amp;aid=404&amp;amp;nid=56&quot;&gt;Scala 指南（@yankay）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一个学习 Scala 精彩特性的网站，非常棒！&lt;/p&gt;

&lt;h4 id=&quot;java-httpwwwprogramcreekcomsimple-javaampaid426ampnid56&quot;&gt;&lt;a href=&quot;http://www.programcreek.com/simple-java/&amp;amp;aid=426&amp;amp;nid=56&quot;&gt;90个高质量的 Java 问答&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;面试备用吧！&lt;a href=&quot;http://www.programcreek.com/2013/01/simple-java-download/&quot;&gt;PDF 下载地址&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;c--peter-fackahttppfackabinaryparadisecomarticlesguide-to-advanced-programming-in-chtmlampaid465ampnid56&quot;&gt;&lt;a href=&quot;http://pfacka.binaryparadise.com/articles/guide-to-advanced-programming-in-C.html&amp;amp;aid=465&amp;amp;nid=56&quot;&gt;C 语言高级编程指南 (Peter Facka)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;C 语言进阶教程，讲解细致。&lt;/p&gt;

&lt;h4 id=&quot;python-matt-makaihttpwwwfullstackpythoncomampaid476ampnid56&quot;&gt;&lt;a href=&quot;http://www.fullstackpython.com/&amp;amp;aid=476&amp;amp;nid=56&quot;&gt;全栈 Python (Matt Makai)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一站式 Python 学习网站，覆盖 Python 学习的方方面面。&lt;/p&gt;

&lt;h4 id=&quot;nodejshttpnqdenggithubio7-days-nodejsampaid510ampnid56&quot;&gt;&lt;a href=&quot;http://nqdeng.github.io/7-days-nodejs/&amp;amp;aid=510&amp;amp;nid=56&quot;&gt;七天学会 NodeJS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;不错的入门教程，阿里巴巴国际站前端技术部出品。&lt;/p&gt;

&lt;h4 id=&quot;python-httpwwwliaoxuefengcomwiki001374738125095c955c1e6d8bb493182103fac9270762a000ampaid655ampnid56&quot;&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000&amp;amp;aid=655&amp;amp;nid=56&quot;&gt;Python 入门教程（@廖雪峰）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;非常不错，推荐。&lt;/p&gt;

&lt;h4 id=&quot;cgopython--qyuhenhttpsgithubcomqyuhenbookampaid828ampnid56&quot;&gt;&lt;a href=&quot;https://github.com/qyuhen/book&amp;amp;aid=828&amp;amp;nid=56&quot;&gt;C/Go/Python 学习笔记 (qyuhen)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这兄弟笔记写的太详细认真了，完全超出我的想象。一本 Go，一本 C，一本 Python。值得推荐。via &lt;a href=&quot;http://weibo.com/marchliu&quot;&gt;@刘鑫Mars&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;php--jamie-york-ziadozhttpsgithubcomziadozawesome-phpampaid878ampnid56&quot;&gt;&lt;a href=&quot;https://github.com/ziadoz/awesome-php&amp;amp;aid=878&amp;amp;nid=56&quot;&gt;PHP 学习资源列表 (Jamie York ziadoz)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;非常棒！PHPer 果断 fork 吧！&lt;/p&gt;

&lt;h4 id=&quot;angularjs-leon-revillhttpwwwrevillwebcomtutorialsangularjs-in-30-minutes-angularjs-tutorialampaid949ampnid56&quot;&gt;&lt;a href=&quot;http://www.revillweb.com/tutorials/angularjs-in-30-minutes-angularjs-tutorial/&amp;amp;aid=949&amp;amp;nid=56&quot;&gt;30 分钟学会 AngularJS (Leon Revill)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;同时推荐&lt;a href=&quot;https://medium.com/on-coding/8c7dc63ca65f&quot;&gt;写给设计师的 AngularJS 教程&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;cache--ruby-china--huacnleehttpsruby-chinaorgtopics19436ampaid1082ampnid56&quot;&gt;&lt;a href=&quot;https://ruby-china.org/topics/19436&amp;amp;aid=1082&amp;amp;nid=56&quot;&gt;Cache 在 Ruby China 里面的应用 (@huacnlee)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;来自 Ruby China 的实战经验&lt;/p&gt;

&lt;h4 id=&quot;the-swift-programming-language-swifthttpwwwswiftguidecnampaid1154ampnid56&quot;&gt;&lt;a href=&quot;http://www.swiftguide.cn/&amp;amp;aid=1154&amp;amp;nid=56&quot;&gt;The Swift Programming Language 中文版（@Swift中文翻译组）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;更多 Swift 干货 → &lt;a href=&quot;http://swift.manong.io/&quot;&gt;《Swift 特刊》&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;css-shapehttpzhuanlanzhihucomthefrontendperiodicals19774074ampaid1163ampnid56&quot;&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/thefrontendperiodicals/19774074&amp;amp;aid=1163&amp;amp;nid=56&quot;&gt;[译] 深入浅出 CSS Shape（@寸志）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;很棒的翻译，感谢译者。&lt;/p&gt;

&lt;h4 id=&quot;ios-8--david-liuhttpnshipstercnios8ampaid1216ampnid56&quot;&gt;&lt;a href=&quot;http://nshipster.cn/ios8/&amp;amp;aid=1216&amp;amp;nid=56&quot;&gt;[译] iOS 8 新特性 (David Liu)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;来自大神 Mattt Thompson，&lt;a href=&quot;http://nshipster.com/ios8/&quot;&gt;原文地址&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;python-----httphujiaweibujidaogithubiopythonampaid1218ampnid56&quot;&gt;&lt;a href=&quot;http://hujiaweibujidao.github.io/python/&amp;amp;aid=1218&amp;amp;nid=56&quot;&gt;Python 基础知识 + 数据结构 + 算法设计（@五道口宅男）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;非常不错的 Python 学习资料合集，感谢作者。（感谢 &lt;a href=&quot;http://weibo.com/u/2187696053&quot;&gt;@阿弥陀佛一页书&lt;/a&gt; 投稿）&lt;/p&gt;

&lt;h4 id=&quot;golang-httpblogcsdnnetghj1976articledetails27996095ampaid1250ampnid56&quot;&gt;&lt;a href=&quot;http://blog.csdn.net/ghj1976/article/details/27996095&amp;amp;aid=1250&amp;amp;nid=56&quot;&gt;Golang 适合高并发场景的原因分析（@蝈蝈俊）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文中附有不少高质量的参考资料&lt;/p&gt;

&lt;h4 id=&quot;c-httpstackoverflowcomquestions388242the-definitive-c-book-guide-and-listampaid1272ampnid56&quot;&gt;&lt;a href=&quot;http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&amp;amp;aid=1272&amp;amp;nid=56&quot;&gt;C++ 权威书籍指南&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stack Overflow 上的一篇热帖，阅读量已破 70w。同时推荐 &lt;a href=&quot;http://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list&quot;&gt;C 权威书籍指南&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;pdf-javascript--addy-osmanihttpsspeakerdeckcomaddyosmanijavascript-memory-management-masterclassampaid1403ampnid56&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/addyosmani/javascript-memory-management-masterclass&amp;amp;aid=1403&amp;amp;nid=56&quot;&gt;[PDF] JavaScript 内存管理 (Addy Osmani)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;足足 139 页的干货分享&lt;/p&gt;

&lt;h4 id=&quot;go--go-httpwwwinfoqcomcnarticlesgo-language-introductionampaid1485ampnid56&quot;&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/go-language-introduction&amp;amp;aid=1485&amp;amp;nid=56&quot;&gt;Go 并发编程之 Go 语言概述（郝林）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;不错的入门介绍&lt;/p&gt;

&lt;h4 id=&quot;nodejs--alsotanghttpsgithubcomalsotangnode-lessonsampaid1507ampnid56&quot;&gt;&lt;a href=&quot;https://github.com/alsotang/node-lessons&amp;amp;aid=1507&amp;amp;nid=56&quot;&gt;Node.js 包教不包会 (alsotang)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;侧重实战的 Node.js 教程&lt;/p&gt;

&lt;h4 id=&quot;zsh--joejaghttpcodejoejagcom2014why-zshhtmlampaid1638ampnid56&quot;&gt;&lt;a href=&quot;http://code.joejag.com/2014/why-zsh.html&amp;amp;aid=1638&amp;amp;nid=56&quot;&gt;我最爱的 Zsh 特征 (JoeJag)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;终极 Shell，N 多大招。&lt;/p&gt;

&lt;h4 id=&quot;pdf-erlang-in-anger--denghuijzhttpvdiskweibocomsigq-rfuju0-4ampaid1689ampnid56&quot;&gt;&lt;a href=&quot;http://vdisk.weibo.com/s/iGQ-rFuJU0-4&amp;amp;aid=1689&amp;amp;nid=56&quot;&gt;[PDF] Erlang in Anger 中文版 (@DengHui_JZ)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;感谢译者&lt;/p&gt;

&lt;h4 id=&quot;r--john-d-cookhttpwwwjohndcookcomblogrlanguageforprogrammersampaid1718ampnid56&quot;&gt;&lt;a href=&quot;http://www.johndcook.com/blog/r_language_for_programmers/&amp;amp;aid=1718&amp;amp;nid=56&quot;&gt;R 语言学习笔记 (John D. Cook)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;很不错&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;最受欢迎的技术干货（工具资料篇）&lt;/h3&gt;

&lt;h4 id=&quot;httpwwwcsusfcaedugallesvisualizationalgorithmshtmlampaid363ampnid56&quot;&gt;&lt;a href=&quot;http://www.cs.usfca.edu/~galles/visualization/Algorithms.html&amp;amp;aid=363&amp;amp;nid=56&quot;&gt;一个超赞的数据结构可视化站点&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;图形化的演示，超赞！&lt;a href=&quot;http://mover.sinaapp.com/Algorithms.html&quot;&gt;汉化版&lt;/a&gt;（感谢作者 &lt;a href=&quot;http://weibo.com/wlcxiying&quot;&gt;@IT好码农&lt;/a&gt; ）&lt;/p&gt;

&lt;h4 id=&quot;httpwwwzhihucomquestion22420900ampaid407ampnid56&quot;&gt;&lt;a href=&quot;http://www.zhihu.com/question/22420900&amp;amp;aid=407&amp;amp;nid=56&quot;&gt;怎样成为全栈工程师？（@知乎）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一些回答很受启发，推荐。&lt;/p&gt;

&lt;h4 id=&quot;stackedit----markdown-httpsstackeditioampaid669ampnid56&quot;&gt;&lt;a href=&quot;https://stackedit.io/&amp;amp;aid=669&amp;amp;nid=56&quot;&gt;StackEdit - 一个好用的 markdown 编辑器&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;用过的都说好！&lt;/p&gt;

&lt;h4 id=&quot;zip--v22httpvdiskweibocomsepyle0kt9mowampaid773ampnid56&quot;&gt;&lt;a href=&quot;http://vdisk.weibo.com/s/EPyLE0kt9Mow&amp;amp;aid=773&amp;amp;nid=56&quot;&gt;[ZIP] 知道创宇研发技能表 v2.2（@余弦）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;从通用技能（沟通、成长等）、专业技能（Web 安全、研发清单等）、设计思想到优质资源，应有尽有。&lt;/p&gt;

&lt;h4 id=&quot;httpsgithubcompapers-we-lovepapers-we-loveampaid839ampnid56&quot;&gt;&lt;a href=&quot;https://github.com/papers-we-love/papers-we-love&amp;amp;aid=839&amp;amp;nid=56&quot;&gt;大量计算机科学经典论文&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;分类清晰&lt;/p&gt;

&lt;h4 id=&quot;gitbook----githubgit--markdown-httpwwwgitbookioampaid893ampnid56&quot;&gt;&lt;a href=&quot;http://www.gitbook.io/&amp;amp;aid=893&amp;amp;nid=56&quot;&gt;GitBook - 一个使用 GitHub/Git 和 Markdown 制作编程书籍的命令行工具&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/GitbookIO/gitbook&quot;&gt;GitHub 地址&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;github-httpsguidesgithubcomoverviewsos-contributingampaid917ampnid56&quot;&gt;&lt;a href=&quot;https://guides.github.com/overviews/os-contributing/&amp;amp;aid=917&amp;amp;nid=56&quot;&gt;如何参与一个 GitHub 开源项目？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;GitHub 官方指南，非常棒。&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=200909764&amp;amp;idx=1&amp;amp;sn=5184c6637977a94916508379b194f3e0&quot;&gt;译文&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;justjavachttpscodecsdnnetjustjavacfree-programming-books-zhcnampaid919ampnid56&quot;&gt;&lt;a href=&quot;https://code.csdn.net/JustJavaC/free-programming-books-zh_cn&amp;amp;aid=919&amp;amp;nid=56&quot;&gt;免费的编程中文书籍索引 (JustJavaC)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;感谢 &lt;a href=&quot;http://weibo.com/hidoslin&quot;&gt;@Hi_DosLin&lt;/a&gt; 的推荐&lt;/p&gt;

&lt;h4 id=&quot;iteyehttpwwwiteyecommagazines130ampaid984ampnid56&quot;&gt;&lt;a href=&quot;http://www.iteye.com/magazines/130&amp;amp;aid=984&amp;amp;nid=56&quot;&gt;编程精华资源大汇总 (ITeye)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;点个赞！&lt;/p&gt;

&lt;h4 id=&quot;httpwwwibmcomdeveloperworkscnweb1404wangfxjsframeworksampaid1055ampnid56&quot;&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1404_wangfx_jsframeworks/&amp;amp;aid=1055&amp;amp;nid=56&quot;&gt;前端开发框架对比（王芳侠）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文选取了 Bootstrap、jQuery UI、jQuery Mobile 等 16 个国内外前端开发框架进行初步的横向比较，可以作为大家挑选前端开发框架的初步参考。&lt;/p&gt;

&lt;h4 id=&quot;teylahttparticleyeeyanorgview22139410514ampaid1169ampnid56&quot;&gt;&lt;a href=&quot;http://article.yeeyan.org/view/22139/410514&amp;amp;aid=1169&amp;amp;nid=56&quot;&gt;[译] 机器学习最佳入门学习资料汇总 (teyla)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;不错的整理&lt;/p&gt;

&lt;h4 id=&quot;vim-httpvimawesomecomampaid1226ampnid56&quot;&gt;&lt;a href=&quot;http://vimawesome.com/&amp;amp;aid=1226&amp;amp;nid=56&quot;&gt;Vim 插件合集&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;应有尽有！&lt;/p&gt;

&lt;h4 id=&quot;docker--yeasyhttpswwwgitbookiobookyeasydockerpracticeampaid1459ampnid56&quot;&gt;&lt;a href=&quot;https://www.gitbook.io/book/yeasy/docker_practice&amp;amp;aid=1459&amp;amp;nid=56&quot;&gt;开源电子书《Docker 从入门到实践》 (yeasy)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;非常棒，感谢作者。&lt;/p&gt;

&lt;h4 id=&quot;linux-httpbillie66githubiotlclampaid1513ampnid56&quot;&gt;&lt;a href=&quot;http://billie66.github.io/TLCL/&amp;amp;aid=1513&amp;amp;nid=56&quot;&gt;《Linux 命令行》中文版（好奇猫团队）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;为译者们点赞！&lt;/p&gt;

&lt;h4 id=&quot;pro-git-scott-chaconhttpgit-scmcombookenv2ampaid1564ampnid56&quot;&gt;&lt;a href=&quot;http://git-scm.com/book/en/v2&amp;amp;aid=1564&amp;amp;nid=56&quot;&gt;免费电子书《Pro Git》第二版发布 (Scott Chacon)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;很多人是看着这本书入门 Git 的&lt;/p&gt;

&lt;h4 id=&quot;httpcoderlmngithubiocode-standardsampaid1603ampnid56&quot;&gt;&lt;a href=&quot;http://coderlmn.github.io/code-standards/&amp;amp;aid=1603&amp;amp;nid=56&quot;&gt;[译] 前端代码规范及最佳实践 (@老码农的自留地)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文档包含了 Isobar 公司的创意技术部（前端工程）开发 Web 应用的规范&lt;/p&gt;

&lt;h4 id=&quot;pyspider----python--binuxhttpsgithubcombinuxpyspiderampaid1644ampnid56&quot;&gt;&lt;a href=&quot;https://github.com/binux/pyspider&amp;amp;aid=1644&amp;amp;nid=56&quot;&gt;pyspider - 一个 Python 实现的强大的爬虫系统 (binux)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;国人作品&lt;/p&gt;

&lt;h4 id=&quot;linux--2014-brendan-gregghttpwwwbrendangreggcomblog2014-11-22linux-perf-tools-2014htmlampaid1666ampnid56&quot;&gt;&lt;a href=&quot;http://www.brendangregg.com/blog/2014-11-22/linux-perf-tools-2014.html&amp;amp;aid=1666&amp;amp;nid=56&quot;&gt;Linux 性能工具 2014 (Brendan Gregg)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;最新版，强烈推荐。&lt;/p&gt;

&lt;h4 id=&quot;html5-httpwwwjikexueyuancomeventhtml5htmlhmsrmanongtoolhtml5event5ampaid1763ampnid56&quot;&gt;&lt;a href=&quot;http://www.jikexueyuan.com/event/html5.html?hmsr=manong_tool_html5event_5&amp;amp;aid=1763&amp;amp;nid=56&quot;&gt;最棒的 HTML5 视频教程&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;10 阶段学习，从入门到精通，在线答疑互动，资源一键下载。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;最受欢迎的技术干货（精品课程篇）&lt;/h3&gt;

&lt;h4 id=&quot;linux-httpslugustceducnopencourseampaid1585ampnid56&quot;&gt;&lt;a href=&quot;https://lug.ustc.edu.cn/OpenCourse/&amp;amp;aid=1585&amp;amp;nid=56&quot;&gt;Linux 入门公开课&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;九课时，一步步带你入门。&lt;/p&gt;

&lt;h4 id=&quot;python-httpmoocstudy163comcourseyookcs0001-1000002017infoampaid1623ampnid56&quot;&gt;&lt;a href=&quot;http://mooc.study.163.com/course/YOOKCS0001-1000002017#/info&amp;amp;aid=1623&amp;amp;nid=56&quot;&gt;Python 程序设计入门&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;面向无编程基础的学生，培养运用 Python 编程语言解决实际问题的编程能力。&lt;/p&gt;

&lt;h4 id=&quot;httpswwwcourseraorgcoursentumloneampaid1625ampnid56&quot;&gt;&lt;a href=&quot;https://www.coursera.org/course/ntumlone&amp;amp;aid=1625&amp;amp;nid=56&quot;&gt;机器学习基石&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;来自台大的课程，将介绍各领域中的机器学习使用者都应该知道的基础演算法、理论及实务工具。&lt;/p&gt;

&lt;h4 id=&quot;android-httpswwwcourseraorgcourseandroidapps101ampaid1704ampnid56&quot;&gt;&lt;a href=&quot;https://www.coursera.org/course/androidapps101&amp;amp;aid=1704&amp;amp;nid=56&quot;&gt;创新、严肃、好玩的 Android 应用程序开发&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;课程轻松愉快，适合初学者，不需要任何编程基础。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;最受欢迎的编程书籍&lt;/h3&gt;

&lt;h4 id=&quot;httpwwwamazoncngpproductb00hy8six2refaslitftlieutf8camp536creative3200creativeasinb00hy8six2linkcodeas2tagmanongio-23ampaid499ampnid56smallmiloyipsmallhttpweibocommiloyip&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B00HY8SIX2/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00HY8SIX2&amp;amp;linkCode=as2&amp;amp;tag=manongio-23&amp;amp;aid=499&amp;amp;nid=56&quot;&gt;《游戏引擎架构》&lt;/a&gt;&lt;a href=&quot;http://weibo.com/miloyip&quot;&gt;&lt;small&gt;@miloyip&lt;/small&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本书同时涵盖游戏引擎软件开发的理论及实践，并对多方面的题目进行探讨。译者叶劲峰（@miloyip）现任腾讯互娱研发部 T4 技术专家，曾开发《爱丽丝惊魂记︰疯狂再临》、《美食从天而降》和《王子传奇》。&lt;/p&gt;

&lt;h4 id=&quot;java-httpwwwamazoncngpproductb00ju5c2n4refaslitftlieutf8camp536creative3200creativeasinb00ju5c2n4linkcodeas2tagmanongio-23ampaid1004ampnid56smallsmallhttpweibocomvanadies10&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B00JU5C2N4/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00JU5C2N4&amp;amp;linkCode=as2&amp;amp;tag=manongio-23&amp;amp;aid=1004&amp;amp;nid=56&quot;&gt;《大型网站系统与 Java 中间件实践》&lt;/a&gt;&lt;a href=&quot;http://weibo.com/vanadies10&quot;&gt;&lt;small&gt;曾宪杰&lt;/small&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本书出自淘宝技术部总监之手，经验直接来自淘宝服务框架、消息中间件及数据访问层。&lt;/p&gt;

&lt;h4 id=&quot;httpwwwamazoncngpproductb00kfm43corefaslitftlieutf8camp536creative3200creativeasinb00kfm43colinkcodeas2tagmanongio-23ampaid1153ampnid56smallchristopher-steinersmallhttpwwwchrissteinercom&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B00KFM43CO/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00KFM43CO&amp;amp;linkCode=as2&amp;amp;tag=manongio-23&amp;amp;aid=1153&amp;amp;nid=56&quot;&gt;《算法帝国》&lt;/a&gt;&lt;a href=&quot;http://www.chrissteiner.com/&quot;&gt;&lt;small&gt;Christopher Steiner&lt;/small&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;《纽约时报》畅销书作者斯坦纳的又一力作，通过一个又一个引人入胜的故事，向读者介绍了算法掌控世界的真实情况，揭示了“机器人革命”是如何悄然在我们身边发生的。&lt;/p&gt;

&lt;h4 id=&quot;unix--3-httpwwwamazoncngpproductb00kmr129erefaslitftlieutf8camp536creative3200creativeasinb00kmr129elinkcodeas2tagmanongio-23ampaid1182ampnid56smallw-richard-stevens-amp-stephen-a-ragosmallhttpwwwapuebookcomapue3ehtml&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B00KMR129E/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00KMR129E&amp;amp;linkCode=as2&amp;amp;tag=manongio-23&amp;amp;aid=1182&amp;amp;nid=56&quot;&gt;《UNIX 环境高级编程（第 3 版）》&lt;/a&gt;&lt;a href=&quot;http://www.apuebook.com/apue3e.html&quot;&gt;&lt;small&gt;W. Richard Stevens &amp;amp; Stephen A. Rago&lt;/small&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本书是被誉为 UNIX 编程“圣经”的 Advanced Programming in the UNIX Environment 一书的第 3 版，是一本 UNIX/Linux 程序员不可或缺的参考书。&lt;/p&gt;

&lt;h4 id=&quot;redis-httpwwwamazoncngpproductb00l4xhh0srefaslitftlieutf8camp536creative3200creativeasinb00l4xhh0slinkcodeas2tagmanongio-23ampaid1210ampnid56smallsmallhttpweibocomhuangz1990&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B00L4XHH0S/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00L4XHH0S&amp;amp;linkCode=as2&amp;amp;tag=manongio-23&amp;amp;aid=1210&amp;amp;nid=56&quot;&gt;《Redis 设计与实现》&lt;/a&gt;&lt;a href=&quot;http://weibo.com/huangz1990&quot;&gt;&lt;small&gt;黄健宏&lt;/small&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;全面而完整地讲解了 Redis 的内部机制与实现方式，对 Redis 的大多数单机功能以及所有多机功能的实现原理进行了介绍，展示了这些功能的核心数据结构以及关键的算法思想。&lt;/p&gt;

&lt;h4 id=&quot;httpwwwamazoncngpproductb00kqdtz4srefaslitftlieutf8camp536creative3200creativeasinb00kqdtz4slinkcodeas2tagmanongio-23ampaid1236ampnid56&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B00KQDTZ4S/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00KQDTZ4S&amp;amp;linkCode=as2&amp;amp;tag=manongio-23&amp;amp;aid=1236&amp;amp;nid=56&quot;&gt;《大教堂与集市》&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;《大教堂与集市》在开源运动中的地位相当于基督教的圣经，用黑客们的话说，这是“黑客藏经阁”的第一收藏。&lt;a href=&quot;http://www.amazon.cn/gp/product/B00L2XQY0Y/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00L2XQY0Y&amp;amp;linkCode=as2&amp;amp;tag=manongio-23&quot;&gt;Kindle 电子书&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;httpwwwamazoncngpproductb00mo7r1sgrefaslitftlieutf8camp536creative3200creativeasinb00mo7r1sglinkcodeas2tagmanongio-23ampaid1393ampnid56&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B00MO7R1SG/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00MO7R1SG&amp;amp;linkCode=as2&amp;amp;tag=manongio-23&amp;amp;aid=1393&amp;amp;nid=56&quot;&gt;《人件（原书第 3 版）》&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;每一个管理软件团队的人都应该阅读本书，而且应该年复一年地温习，常温常新。—— Stack Overflow 创始人之一 Joel Spolsky&lt;/p&gt;

&lt;h4 id=&quot;httpwwwamazoncngpproductb00n4m0dvcrefaslitftlieutf8camp536creative3200creativeasinb00n4m0dvclinkcodeas2tagmanongio-23ampaid1444ampnid56smallsmallhttpweibocomsdxinz&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B00N4M0DVC/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00N4M0DVC&amp;amp;linkCode=as2&amp;amp;tag=manongio-23&amp;amp;aid=1444&amp;amp;nid=56&quot;&gt;《构建之法：现代软件工程》&lt;/a&gt;&lt;a href=&quot;http://weibo.com/sdxinz&quot;&gt;&lt;small&gt;邹欣&lt;/small&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;作者有长达 20 年的一线软件开发经验，他利用业余时间在数所高校进行了长达 6 年的软件工程教学实践，总结出了在 16 周的时间内让同学们通过“做中学”掌握实用的软件工程技术的教学计划。&lt;/p&gt;

&lt;h4 id=&quot;httpwwwamazoncngpproductb00ngw4eagrefaslitftlieutf8camp536creative3200creativeasinb00ngw4eaglinkcodeas2tagmanongio-23ampaid1476ampnid56smallsmallhttpweibocommalefactor&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B00NGW4EAG/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00NGW4EAG&amp;amp;linkCode=as2&amp;amp;tag=manongio-23&amp;amp;aid=1476&amp;amp;nid=56&quot;&gt;《大数据日知录：架构与算法》&lt;/a&gt;&lt;a href=&quot;http://weibo.com/malefactor&quot;&gt;&lt;small&gt;张俊林&lt;/small&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;《这就是搜索引擎：核心技术详解》一书作者的新作，历时三年完成，是目前最全面梳理大数据的相关技术书籍。&lt;a href=&quot;http://vdisk.weibo.com/s/D2szyg_bVcQ4&quot;&gt;试读章节&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;httpwwwamazoncngpproductb00oy6ngdyrefaslitftlieutf8camp536creative3200creativeasinb00oy6ngdylinkcodeas2tagmanongio-23ampaid1579ampnid56smalljeffxiongsmallhttpweibocomgigix&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B00OY6NGDY/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00OY6NGDY&amp;amp;linkCode=as2&amp;amp;tag=manongio-23&amp;amp;aid=1579&amp;amp;nid=56&quot;&gt;《不敢止步：一个软件工匠的 12 年》&lt;/a&gt;&lt;a href=&quot;http://weibo.com/gigix&quot;&gt;&lt;small&gt;@JeffXiong&lt;/small&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这本书不只是讲一位程序员怎么艰苦奋斗出人头地，也没打算写成程序员的职业规划励志书，而是通过朴实的文字记录一段复杂性、丰富的经历，以及这些经历对作者的塑造。&lt;/p&gt;

&lt;p&gt;sources&lt;/p&gt;

&lt;p&gt;[Step by step guide to install Postfix] : &lt;a href=&quot;http://flurdy.com/docs/postfix/#install_repos&quot;&gt;http://flurdy.com/docs/postfix/#install_repos&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Jan 2015 19:09:57 +0800</pubDate>
        <link>http://oiolong.github.io//linux/2015/01/04/manong-2014-collection.html</link>
        <guid isPermaLink="true">http://oiolong.github.io//linux/2015/01/04/manong-2014-collection.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>关于修改linux 时区到台湾的笔记</title>
        <description>&lt;pre&gt;&lt;code&gt; cp /usr/share/zoneinfo/Asia/Taipei /etc/localtime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sources&lt;/p&gt;

&lt;p&gt;[How To: 2 Methods To Change TimeZone in Linux] : &lt;a href=&quot;http://www.thegeekstuff.com/2010/09/change-timezone-in-linux/&quot;&gt;http://www.thegeekstuff.com/2010/09/change-timezone-in-linux/&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 31 Dec 2014 23:50:57 +0800</pubDate>
        <link>http://oiolong.github.io//linux/2014/12/31/change-timezone-in-linux.html</link>
        <guid isPermaLink="true">http://oiolong.github.io//linux/2014/12/31/change-timezone-in-linux.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>关于redis 备份的笔记</title>
        <description>&lt;pre&gt;&lt;code&gt;41 15 * * *     /bin/rm /data/redis/dump.rdb
43 15 * * *     /usr/local/bin/redis-cli bgsave
47 15 * * *     /bin/sh /root/redisDailyBackup.sh
48 15 * * *     /usr/local/bin/redis-cli FLUSHALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改 redisDailyBackup.sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim redisDailyBackup.sh
#!/bin/bash
FILE=/data/redis/dump.rdb
BACKUP_DIR=/backup
BACKUP_PREFIX=&quot;redis.dump.rdb&quot;
DAY=`date &#39;+%Y-%m-%d&#39;`
REDIS_DEST=&quot;$BACKUP_DIR/$BACKUP_PREFIX.$DAY&quot;

if [ -f $FILE ];
then
   echo &quot;File $FILE exists&quot;
        /bin/mv $FILE $REDIS_DEST
else
   echo &quot;File $FILE does not exists&quot;
        exit
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;todo &lt;/p&gt;

&lt;p&gt;备份前把数据存入 mysql 和用 echarts 表现&lt;/p&gt;

&lt;p&gt;sources&lt;/p&gt;

&lt;p&gt;[Redis save and backup script] : &lt;a href=&quot;http://redis4you.com/articles.php?id=010&quot;&gt;http://redis4you.com/articles.php?id=010&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[baid echarts] : &lt;a href=&quot;http://echarts.baidu.com/doc/example.html&quot;&gt;http://echarts.baidu.com/doc/example.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Dec 2014 19:01:57 +0800</pubDate>
        <link>http://oiolong.github.io//linux/2014/12/31/redis-save-and-backup-script.html</link>
        <guid isPermaLink="true">http://oiolong.github.io//linux/2014/12/31/redis-save-and-backup-script.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>关于postfix mail server  的安装笔记</title>
        <description>&lt;p&gt;安装到这里&lt;/p&gt;

&lt;p&gt;You should put the name of your server in this file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vi /etc/mailname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Could be something like smtp.domain.name, where domain name obviously is replaced with your domain name.
Now will open the main postfix configuration file:&lt;/p&gt;

&lt;p&gt;sources&lt;/p&gt;

&lt;p&gt;[Step by step guide to install Postfix] : &lt;a href=&quot;http://flurdy.com/docs/postfix/#install_repos&quot;&gt;http://flurdy.com/docs/postfix/#install_repos&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Dec 2014 00:49:57 +0800</pubDate>
        <link>http://oiolong.github.io//linux/2014/12/30/install-postfix-mail-server.html</link>
        <guid isPermaLink="true">http://oiolong.github.io//linux/2014/12/30/install-postfix-mail-server.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>关于php composer 的安装笔记</title>
        <description>&lt;p&gt;./configure –prefix=/usr/local/openresty –with-luajit –with-http_drizzle_module –with-http_iconv_module –with-http_realip_module –with-poll_module –with-http_stub_status_module –with-http_ssl_module –with-http_geoip_module  –add-module=../nginx-eval-module&lt;/p&gt;

&lt;p&gt;if ($http_user_agent ~* “(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino”) {
  set $mobile_rewrite perform;
}&lt;/p&gt;

&lt;p&gt;https://github.com/dursegov/nginx-subfilter-module&lt;/p&gt;

&lt;p&gt;https://github.com/openresty/redis2-nginx-module/search?utf8=%E2%9C%93&amp;amp;q=incr&lt;/p&gt;

&lt;p&gt;https://github.com/openresty/drizzle-nginx-module#installation&lt;/p&gt;

&lt;p&gt;https://github.com/openresty/lua-nginx-module&lt;/p&gt;

&lt;p&gt;http://www.douban.com/group/topic/14859879/&lt;/p&gt;

&lt;p&gt;http://justcodeit.info/blog/openresty-as-compute-intensive-server.html&lt;/p&gt;

&lt;p&gt;https://github.com/dursegov/nginx-subfilter-module&lt;/p&gt;

&lt;p&gt;https://github.com/vkholodkov/nginx-eval-module/tree/master&lt;/p&gt;

&lt;p&gt;https://github.com/openresty/openresty.org&lt;/p&gt;

&lt;p&gt;https://github.com/elcuervo/nginx_http_redis&lt;/p&gt;

&lt;p&gt;https://github.com/openresty/redis2-nginx-module&lt;/p&gt;

&lt;p&gt;try_files&lt;/p&gt;

&lt;p&gt;http://stackoverflow.com/questions/15451191/how-to-serve-html-files-in-nginx-without-showing-the-extension-in-this-alias-set&lt;/p&gt;

&lt;p&gt;sources&lt;/p&gt;

&lt;p&gt;[getcomposer getting started] : &lt;a href=&quot;https://getcomposer.org/doc/00-intro.md&quot;&gt;https://getcomposer.org/doc/00-intro.md&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Dec 2014 07:52:57 +0800</pubDate>
        <link>http://oiolong.github.io//linux/2014/12/06/install-openresty.html</link>
        <guid isPermaLink="true">http://oiolong.github.io//linux/2014/12/06/install-openresty.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>关于php composer 的安装笔记</title>
        <description>&lt;p&gt;very ez&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sources&lt;/p&gt;

&lt;p&gt;[getcomposer getting started] : &lt;a href=&quot;https://getcomposer.org/doc/00-intro.md&quot;&gt;https://getcomposer.org/doc/00-intro.md&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Dec 2014 07:52:57 +0800</pubDate>
        <link>http://oiolong.github.io//linux/2014/12/06/install-php-composer.html</link>
        <guid isPermaLink="true">http://oiolong.github.io//linux/2014/12/06/install-php-composer.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Memo</title>
        <description>&lt;p&gt;nginx redis incr&lt;/p&gt;

&lt;p&gt;url&lt;/p&gt;

&lt;p&gt;https://github.com/openresty/redis2-nginx-module/search?utf8=%E2%9C%93&amp;amp;q=incr&lt;/p&gt;

&lt;p&gt;I&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://oiolong.github.io//2014/12/02/memo.html</link>
        <guid isPermaLink="true">http://oiolong.github.io//2014/12/02/memo.html</guid>
        
        
      </item>
    
      <item>
        <title>关于linux kernel coding style 的笔记</title>
        <description>&lt;pre&gt;&lt;code&gt;	Linux kernel coding style
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a short document describing the preferred coding style for the
linux kernel.  Coding style is very personal, and I won’t &lt;em&gt;force&lt;/em&gt; my
views on anybody, but this is what goes for anything that I have to be
able to maintain, and I’d prefer it for most other things too.  Please
at least consider the points made here.&lt;/p&gt;

&lt;p&gt;First off, I’d suggest printing out a copy of the GNU coding standards,
and NOT read it.  Burn them, it’s a great symbolic gesture.&lt;/p&gt;

&lt;p&gt;Anyway, here goes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 	Chapter 1: Indentation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tabs are 8 characters, and thus indentations are also 8 characters.
There are heretic movements that try to make indentations 4 (or even 2!)
characters deep, and that is akin to trying to define the value of PI to
be 3.&lt;/p&gt;

&lt;p&gt;Rationale: The whole idea behind indentation is to clearly define where
a block of control starts and ends.  Especially when you’ve been looking
at your screen for 20 straight hours, you’ll find it a lot easier to see
how the indentation works if you have large indentations.&lt;/p&gt;

&lt;p&gt;Now, some people will claim that having 8-character indentations makes
the code move too far to the right, and makes it hard to read on a
80-character terminal screen.  The answer to that is that if you need
more than 3 levels of indentation, you’re screwed anyway, and should fix
your program.&lt;/p&gt;

&lt;p&gt;In short, 8-char indents make things easier to read, and have the added
benefit of warning you when you’re nesting your functions too deep.
Heed that warning.&lt;/p&gt;

&lt;p&gt;The preferred way to ease multiple indentation levels in a switch statement is
to align the “switch” and its subordinate “case” labels in the same column
instead of “double-indenting” the “case” labels.  E.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;switch (suffix) {
case &#39;G&#39;:
case &#39;g&#39;:
	mem &amp;lt;&amp;lt;= 30;
	break;
case &#39;M&#39;:
case &#39;m&#39;:
	mem &amp;lt;&amp;lt;= 20;
	break;
case &#39;K&#39;:
case &#39;k&#39;:
	mem &amp;lt;&amp;lt;= 10;
	/* fall through */
default:
	break;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don’t put multiple statements on a single line unless you have
something to hide:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (condition) do_this;
  do_something_everytime;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don’t put multiple assignments on a single line either.  Kernel coding style
is super simple.  Avoid tricky expressions.&lt;/p&gt;

&lt;p&gt;Outside of comments, documentation and except in Kconfig, spaces are never
used for indentation, and the above example is deliberately broken.&lt;/p&gt;

&lt;p&gt;Get a decent editor and don’t leave whitespace at the end of lines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 2: Breaking long lines and strings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Coding style is all about readability and maintainability using commonly
available tools.&lt;/p&gt;

&lt;p&gt;The limit on the length of lines is 80 columns and this is a strongly
preferred limit.&lt;/p&gt;

&lt;p&gt;Statements longer than 80 columns will be broken into sensible chunks, unless
exceeding 80 columns significantly increases readability and does not hide
information. Descendants are always substantially shorter than the parent and
are placed substantially to the right. The same applies to function headers
with a long argument list. However, never break user-visible strings such as
printk messages, because that breaks the ability to grep for them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 3: Placing Braces and Spaces
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other issue that always comes up in C styling is the placement of
braces.  Unlike the indent size, there are few technical reasons to
choose one placement strategy over the other, but the preferred way, as
shown to us by the prophets Kernighan and Ritchie, is to put the opening
brace last on the line, and put the closing brace first, thusly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (x is true) {
	we do y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This applies to all non-function statement blocks (if, switch, for,
while, do).  E.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;switch (action) {
case KOBJ_ADD:
	return &quot;add&quot;;
case KOBJ_REMOVE:
	return &quot;remove&quot;;
case KOBJ_CHANGE:
	return &quot;change&quot;;
default:
	return NULL;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int function(int x)
{
	body of function
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Heretic people all over the world have claimed that this inconsistency
is …  well …  inconsistent, but all right-thinking people know that
(a) K&amp;amp;R are &lt;em&gt;right&lt;/em&gt; and (b) K&amp;amp;R are right.  Besides, functions are
special anyway (you can’t nest them in C).&lt;/p&gt;

&lt;p&gt;Note that the closing brace is empty on a line of its own, &lt;em&gt;except&lt;/em&gt; in
the cases where it is followed by a continuation of the same statement,
ie a “while” in a do-statement or an “else” in an if-statement, like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do {
	body of do-loop
} while (condition);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (x == y) {
	..
} else if (x &amp;gt; y) {
	...
} else {
	....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rationale: K&amp;amp;R.&lt;/p&gt;

&lt;p&gt;Also, note that this brace-placement also minimizes the number of empty
(or almost empty) lines, without any loss of readability.  Thus, as the
supply of new-lines on your screen is not a renewable resource (think
25-line terminal screens here), you have more empty lines to put
comments on.&lt;/p&gt;

&lt;p&gt;Do not unnecessarily use braces where a single statement will do.&lt;/p&gt;

&lt;p&gt;if (condition)
	action();&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;if (condition)
	do_this();
else
	do_that();&lt;/p&gt;

&lt;p&gt;This does not apply if only one branch of a conditional statement is a single
statement; in the latter case use braces in both branches:&lt;/p&gt;

&lt;p&gt;if (condition) {
	do_this();
	do_that();
} else {
	otherwise();
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	3.1:  Spaces
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Linux kernel style for use of spaces depends (mostly) on
function-versus-keyword usage.  Use a space after (most) keywords.  The
notable exceptions are sizeof, typeof, alignof, and &lt;strong&gt;attribute&lt;/strong&gt;, which look
somewhat like functions (and are usually used with parentheses in Linux,
although they are not required in the language, as in: “sizeof info” after
“struct fileinfo info;” is declared).&lt;/p&gt;

&lt;p&gt;So use a space after these keywords:
	if, switch, case, for, do, while
but not with sizeof, typeof, alignof, or &lt;strong&gt;attribute&lt;/strong&gt;.  E.g.,
	s = sizeof(struct file);&lt;/p&gt;

&lt;p&gt;Do not add spaces around (inside) parenthesized expressions.  This example is
&lt;em&gt;bad&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s = sizeof( struct file );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When declaring pointer data or a function that returns a pointer type, the
preferred use of ‘*’ is adjacent to the data name or function name and not
adjacent to the type name.  Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;char *linux_banner;
unsigned long long memparse(char *ptr, char **retptr);
char *match_strdup(substring_t *s);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use one space around (on each side of) most binary and ternary operators,
such as any of these:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=  +  -  &amp;lt;  &amp;gt;  *  /  %  |  &amp;amp;  ^  &amp;lt;=  &amp;gt;=  ==  !=  ?  :
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but no space after unary operators:
	&amp;amp;  *  +  -  ~  !  sizeof  typeof  alignof  &lt;strong&gt;attribute&lt;/strong&gt;  defined&lt;/p&gt;

&lt;p&gt;no space before the postfix increment &amp;amp; decrement unary operators:
	++  –&lt;/p&gt;

&lt;p&gt;no space after the prefix increment &amp;amp; decrement unary operators:
	++  –&lt;/p&gt;

&lt;p&gt;and no space around the ‘.’ and “-&amp;gt;” structure member operators.&lt;/p&gt;

&lt;p&gt;Do not leave trailing whitespace at the ends of lines.  Some editors with
“smart” indentation will insert whitespace at the beginning of new lines as
appropriate, so you can start typing the next line of code right away.
However, some such editors do not remove the whitespace if you end up not
putting a line of code there, such as if you leave a blank line.  As a result,
you end up with lines containing trailing whitespace.&lt;/p&gt;

&lt;p&gt;Git will warn you about patches that introduce trailing whitespace, and can
optionally strip the trailing whitespace for you; however, if applying a series
of patches, this may make later patches in the series fail by changing their
context lines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 4: Naming
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C is a Spartan language, and so should your naming be.  Unlike Modula-2
and Pascal programmers, C programmers do not use cute names like
ThisVariableIsATemporaryCounter.  A C programmer would call that
variable “tmp”, which is much easier to write, and not the least more
difficult to understand.&lt;/p&gt;

&lt;p&gt;HOWEVER, while mixed-case names are frowned upon, descriptive names for
global variables are a must.  To call a global function “foo” is a
shooting offense.&lt;/p&gt;

&lt;p&gt;GLOBAL variables (to be used only if you &lt;em&gt;really&lt;/em&gt; need them) need to
have descriptive names, as do global functions.  If you have a function
that counts the number of active users, you should call that
“count_active_users()” or similar, you should &lt;em&gt;not&lt;/em&gt; call it “cntusr()”.&lt;/p&gt;

&lt;p&gt;Encoding the type of a function into the name (so-called Hungarian
notation) is brain damaged - the compiler knows the types anyway and can
check those, and it only confuses the programmer.  No wonder MicroSoft
makes buggy programs.&lt;/p&gt;

&lt;p&gt;LOCAL variable names should be short, and to the point.  If you have
some random integer loop counter, it should probably be called “i”.
Calling it “loop_counter” is non-productive, if there is no chance of it
being mis-understood.  Similarly, “tmp” can be just about any type of
variable that is used to hold a temporary value.&lt;/p&gt;

&lt;p&gt;If you are afraid to mix up your local variable names, you have another
problem, which is called the function-growth-hormone-imbalance syndrome.
See chapter 6 (Functions).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 5: Typedefs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please don’t use things like “vps_t”.&lt;/p&gt;

&lt;p&gt;It’s a &lt;em&gt;mistake&lt;/em&gt; to use typedef for structures and pointers. When you see a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vps_t a;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in the source, what does it mean?&lt;/p&gt;

&lt;p&gt;In contrast, if it says&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct virtual_container *a;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can actually tell what “a” is.&lt;/p&gt;

&lt;p&gt;Lots of people think that typedefs “help readability”. Not so. They are
useful only for:&lt;/p&gt;

&lt;p&gt;(a) totally opaque objects (where the typedef is actively used to &lt;em&gt;hide&lt;/em&gt;
     what the object is).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Example: &quot;pte_t&quot; etc. opaque objects that you can only access using
 the proper accessor functions.

 NOTE! Opaqueness and &quot;accessor functions&quot; are not good in themselves.
 The reason we have them for things like pte_t etc. is that there
 really is absolutely _zero_ portably accessible information there.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(b) Clear integer types, where the abstraction &lt;em&gt;helps&lt;/em&gt; avoid confusion
     whether it is “int” or “long”.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; u8/u16/u32 are perfectly fine typedefs, although they fit into
 category (d) better than here.

 NOTE! Again - there needs to be a _reason_ for this. If something is
 &quot;unsigned long&quot;, then there&#39;s no reason to do

typedef unsigned long myflags_t;

 but if there is a clear reason for why it under certain circumstances
 might be an &quot;unsigned int&quot; and under other configurations might be
 &quot;unsigned long&quot;, then by all means go ahead and use a typedef.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(c) when you use sparse to literally create a &lt;em&gt;new&lt;/em&gt; type for
     type-checking.&lt;/p&gt;

&lt;p&gt;(d) New types which are identical to standard C99 types, in certain
     exceptional circumstances.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Although it would only take a short amount of time for the eyes and
 brain to become accustomed to the standard types like &#39;uint32_t&#39;,
 some people object to their use anyway.

 Therefore, the Linux-specific &#39;u8/u16/u32/u64&#39; types and their
 signed equivalents which are identical to standard types are
 permitted -- although they are not mandatory in new code of your
 own.

 When editing existing code which already uses one or the other set
 of types, you should conform to the existing choices in that code.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(e) Types safe for use in userspace.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; In certain structures which are visible to userspace, we cannot
 require C99 types and cannot use the &#39;u32&#39; form above. Thus, we
 use __u32 and similar types in all structures which are shared
 with userspace.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe there are other cases too, but the rule should basically be to NEVER
EVER use a typedef unless you can clearly match one of those rules.&lt;/p&gt;

&lt;p&gt;In general, a pointer, or a struct that has elements that can reasonably
be directly accessed should &lt;em&gt;never&lt;/em&gt; be a typedef.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 6: Functions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions should be short and sweet, and do just one thing.  They should
fit on one or two screenfuls of text (the ISO/ANSI screen size is 80x24,
as we all know), and do one thing and do that well.&lt;/p&gt;

&lt;p&gt;The maximum length of a function is inversely proportional to the
complexity and indentation level of that function.  So, if you have a
conceptually simple function that is just one long (but simple)
case-statement, where you have to do lots of small things for a lot of
different cases, it’s OK to have a longer function.&lt;/p&gt;

&lt;p&gt;However, if you have a complex function, and you suspect that a
less-than-gifted first-year high-school student might not even
understand what the function is all about, you should adhere to the
maximum limits all the more closely.  Use helper functions with
descriptive names (you can ask the compiler to in-line them if you think
it’s performance-critical, and it will probably do a better job of it
than you would have done).&lt;/p&gt;

&lt;p&gt;Another measure of the function is the number of local variables.  They
shouldn’t exceed 5-10, or you’re doing something wrong.  Re-think the
function, and split it into smaller pieces.  A human brain can
generally easily keep track of about 7 different things, anything more
and it gets confused.  You know you’re brilliant, but maybe you’d like
to understand what you did 2 weeks from now.&lt;/p&gt;

&lt;p&gt;In source files, separate functions with one blank line.  If the function is
exported, the EXPORT* macro for it should follow immediately after the closing
function brace line.  E.g.:&lt;/p&gt;

&lt;p&gt;int system_is_up(void)
{
	return system_state == SYSTEM_RUNNING;
}
EXPORT_SYMBOL(system_is_up);&lt;/p&gt;

&lt;p&gt;In function prototypes, include parameter names with their data types.
Although this is not required by the C language, it is preferred in Linux
because it is a simple way to add valuable information for the reader.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 7: Centralized exiting of functions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Albeit deprecated by some people, the equivalent of the goto statement is
used frequently by compilers in form of the unconditional jump instruction.&lt;/p&gt;

&lt;p&gt;The goto statement comes in handy when a function exits from multiple
locations and some common work such as cleanup has to be done.  If there is no
cleanup needed then just return directly.&lt;/p&gt;

&lt;p&gt;The rationale is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unconditional statements are easier to understand and follow&lt;/li&gt;
  &lt;li&gt;nesting is reduced&lt;/li&gt;
  &lt;li&gt;errors by not updating individual exit points when making
  modifications are prevented&lt;/li&gt;
  &lt;li&gt;saves the compiler work to optimize redundant code away ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;int fun(int a)
{
	int result = 0;
	char *buffer = kmalloc(SIZE);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (buffer == NULL)
	return -ENOMEM;

if (condition1) {
	while (loop1) {
		...
	}
	result = 1;
	goto out;
}
... out:
kfree(buffer);
return result; }

	Chapter 8: Commenting
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comments are good, but there is also a danger of over-commenting.  NEVER
try to explain HOW your code works in a comment: it’s much better to
write the code so that the &lt;em&gt;working&lt;/em&gt; is obvious, and it’s a waste of
time to explain badly written code.&lt;/p&gt;

&lt;p&gt;Generally, you want your comments to tell WHAT your code does, not HOW.
Also, try to avoid putting comments inside a function body: if the
function is so complex that you need to separately comment parts of it,
you should probably go back to chapter 6 for a while.  You can make
small comments to note or warn about something particularly clever (or
ugly), but try to avoid excess.  Instead, put the comments at the head
of the function, telling people what it does, and possibly WHY it does
it.&lt;/p&gt;

&lt;p&gt;When commenting the kernel API functions, please use the kernel-doc format.
See the files Documentation/kernel-doc-nano-HOWTO.txt and scripts/kernel-doc
for details.&lt;/p&gt;

&lt;p&gt;Linux style for comments is the C89 “/* … */” style.
Don’t use C99-style “// …” comments.&lt;/p&gt;

&lt;p&gt;The preferred style for long (multi-line) comments is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * This is the preferred style for multi-line
 * comments in the Linux kernel source code.
 * Please use it consistently.
 *
 * Description:  A column of asterisks on the left side,
 * with beginning and ending almost-blank lines.
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For files in net/ and drivers/net/ the preferred style for long (multi-line)
comments is a little different.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* The preferred comment style for files in net/ and drivers/net
 * looks like this.
 *
 * It is nearly the same as the generally preferred comment style,
 * but there is no initial almost-blank line.
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s also important to comment data, whether they are basic types or derived
types.  To this end, use just one data declaration per line (no commas for
multiple data declarations).  This leaves you room for a small comment on each
item, explaining its use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 9: You&#39;ve made a mess of it
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s OK, we all do.  You’ve probably been told by your long-time Unix
user helper that “GNU emacs” automatically formats the C sources for
you, and you’ve noticed that yes, it does do that, but the defaults it
uses are less than desirable (in fact, they are worse than random
typing - an infinite number of monkeys typing into GNU emacs would never
make a good program).&lt;/p&gt;

&lt;p&gt;So, you can either get rid of GNU emacs, or change it to use saner
values.  To do the latter, you can stick the following in your .emacs file:&lt;/p&gt;

&lt;p&gt;(defun c-lineup-arglist-tabs-only (ignored)
  “Line up argument lists by tabs, not spaces”
  (let* ((anchor (c-langelem-pos c-syntactic-element))
	 (column (c-langelem-2nd-pos c-syntactic-element))
	 (offset (- (1+ column) anchor))
	 (steps (floor offset c-basic-offset)))
    (* (max steps 1)
       c-basic-offset)))&lt;/p&gt;

&lt;p&gt;(add-hook ‘c-mode-common-hook
          (lambda ()
            ;; Add kernel style
            (c-add-style
             “linux-tabs-only”
             ‘(“linux” (c-offsets-alist
                        (arglist-cont-nonempty
                         c-lineup-gcc-asm-reg
                         c-lineup-arglist-tabs-only))))))&lt;/p&gt;

&lt;p&gt;(add-hook ‘c-mode-hook
          (lambda ()
            (let ((filename (buffer-file-name)))
              ;; Enable kernel mode for the appropriate files
              (when (and filename
                         (string-match (expand-file-name “~/src/linux-trees”)
                                       filename))
                (setq indent-tabs-mode t)
                (c-set-style “linux-tabs-only”)))))&lt;/p&gt;

&lt;p&gt;This will make emacs go better with the kernel coding style for C
files below ~/src/linux-trees.&lt;/p&gt;

&lt;p&gt;But even if you fail in getting emacs to do sane formatting, not
everything is lost: use “indent”.&lt;/p&gt;

&lt;p&gt;Now, again, GNU indent has the same brain-dead settings that GNU emacs
has, which is why you need to give it a few command line options.
However, that’s not too bad, because even the makers of GNU indent
recognize the authority of K&amp;amp;R (the GNU people aren’t evil, they are
just severely misguided in this matter), so you just give indent the
options “-kr -i8” (stands for “K&amp;amp;R, 8 character indents”), or use
“scripts/Lindent”, which indents in the latest style.&lt;/p&gt;

&lt;p&gt;“indent” has a lot of options, and especially when it comes to comment
re-formatting you may want to take a look at the man page.  But
remember: “indent” is not a fix for bad programming.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 10: Kconfig configuration files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all of the Kconfig* configuration files throughout the source tree,
the indentation is somewhat different.  Lines under a “config” definition
are indented with one tab, while help text is indented an additional two
spaces.  Example:&lt;/p&gt;

&lt;p&gt;config AUDIT
	bool “Auditing support”
	depends on NET
	help
	  Enable auditing infrastructure that can be used with another
	  kernel subsystem, such as SELinux (which requires this for
	  logging of avc messages output).  Does not do system-call
	  auditing without CONFIG_AUDITSYSCALL.&lt;/p&gt;

&lt;p&gt;Seriously dangerous features (such as write support for certain
filesystems) should advertise this prominently in their prompt string:&lt;/p&gt;

&lt;p&gt;config ADFS_FS_RW
	bool “ADFS write support (DANGEROUS)”
	depends on ADFS_FS
	…&lt;/p&gt;

&lt;p&gt;For full documentation on the configuration files, see the file
Documentation/kbuild/kconfig-language.txt.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 11: Data structures
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Data structures that have visibility outside the single-threaded
environment they are created and destroyed in should always have
reference counts.  In the kernel, garbage collection doesn’t exist (and
outside the kernel garbage collection is slow and inefficient), which
means that you absolutely &lt;em&gt;have&lt;/em&gt; to reference count all your uses.&lt;/p&gt;

&lt;p&gt;Reference counting means that you can avoid locking, and allows multiple
users to have access to the data structure in parallel - and not having
to worry about the structure suddenly going away from under them just
because they slept or did something else for a while.&lt;/p&gt;

&lt;p&gt;Note that locking is &lt;em&gt;not&lt;/em&gt; a replacement for reference counting.
Locking is used to keep data structures coherent, while reference
counting is a memory management technique.  Usually both are needed, and
they are not to be confused with each other.&lt;/p&gt;

&lt;p&gt;Many data structures can indeed have two levels of reference counting,
when there are users of different “classes”.  The subclass count counts
the number of subclass users, and decrements the global count just once
when the subclass count goes to zero.&lt;/p&gt;

&lt;p&gt;Examples of this kind of “multi-level-reference-counting” can be found in
memory management (“struct mm_struct”: mm_users and mm_count), and in
filesystem code (“struct super_block”: s_count and s_active).&lt;/p&gt;

&lt;p&gt;Remember: if another thread can find your data structure, and you don’t
have a reference count on it, you almost certainly have a bug.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 12: Macros, Enums and RTL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Names of macros defining constants and labels in enums are capitalized.&lt;/p&gt;

&lt;h1 id=&quot;define-constant-0x12345&quot;&gt;define CONSTANT 0x12345&lt;/h1&gt;

&lt;p&gt;Enums are preferred when defining several related constants.&lt;/p&gt;

&lt;p&gt;CAPITALIZED macro names are appreciated but macros resembling functions
may be named in lower case.&lt;/p&gt;

&lt;p&gt;Generally, inline functions are preferable to macros resembling functions.&lt;/p&gt;

&lt;p&gt;Macros with multiple statements should be enclosed in a do - while block:&lt;/p&gt;

&lt;h1 id=&quot;define-macrofuna-b-c-&quot;&gt;define macrofun(a, b, c) 			\&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;do {					\
	if (a == 5)			\
		do_this(b, c);		\
} while (0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things to avoid when using macros:&lt;/p&gt;

&lt;p&gt;1) macros that affect control flow:&lt;/p&gt;

&lt;h1 id=&quot;define-foox&quot;&gt;define FOO(x)					\&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;do {					\
	if (blah(x) &amp;lt; 0)		\
		return -EBUGGERED;	\
} while(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is a &lt;em&gt;very&lt;/em&gt; bad idea.  It looks like a function call but exits the “calling”
function; don’t break the internal parsers of those who will read the code.&lt;/p&gt;

&lt;p&gt;2) macros that depend on having a local variable with a magic name:&lt;/p&gt;

&lt;h1 id=&quot;define-fooval-barindex-val&quot;&gt;define FOO(val) bar(index, val)&lt;/h1&gt;

&lt;p&gt;might look like a good thing, but it’s confusing as hell when one reads the
code and it’s prone to breakage from seemingly innocent changes.&lt;/p&gt;

&lt;p&gt;3) macros with arguments that are used as l-values: FOO(x) = y; will
bite you if somebody e.g. turns FOO into an inline function.&lt;/p&gt;

&lt;p&gt;4) forgetting about precedence: macros defining constants using expressions
must enclose the expression in parentheses. Beware of similar issues with
macros using parameters.&lt;/p&gt;

&lt;h1 id=&quot;define-constant-0x4000&quot;&gt;define CONSTANT 0x4000&lt;/h1&gt;
&lt;p&gt;#define CONSTEXP (CONSTANT | 3)&lt;/p&gt;

&lt;p&gt;The cpp manual deals with macros exhaustively. The gcc internals manual also
covers RTL which is used frequently with assembly language in the kernel.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 13: Printing kernel messages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kernel developers like to be seen as literate. Do mind the spelling
of kernel messages to make a good impression. Do not use crippled
words like “dont”; use “do not” or “don’t” instead.  Make the messages
concise, clear, and unambiguous.&lt;/p&gt;

&lt;p&gt;Kernel messages do not have to be terminated with a period.&lt;/p&gt;

&lt;p&gt;Printing numbers in parentheses (%d) adds no value and should be avoided.&lt;/p&gt;

&lt;p&gt;There are a number of driver model diagnostic macros in &amp;lt;linux/device.h&amp;gt;
which you should use to make sure messages are matched to the right device
and driver, and are tagged with the right level:  dev_err(), dev_warn(),
dev_info(), and so forth.  For messages that aren’t associated with a
particular device, &amp;lt;linux/printk.h&amp;gt; defines pr_notice(), pr_info(),
pr_warn(), pr_err(), etc.&lt;/p&gt;

&lt;p&gt;Coming up with good debugging messages can be quite a challenge; and once
you have them, they can be a huge help for remote troubleshooting.  However
debug message printing is handled differently than printing other non-debug
messages.  While the other pr_XXX() functions print unconditionally,
pr_debug() does not; it is compiled out by default, unless either DEBUG is
defined or CONFIG_DYNAMIC_DEBUG is set.  That is true for dev_dbg() also,
and a related convention uses VERBOSE_DEBUG to add dev_vdbg() messages to
the ones already enabled by DEBUG.&lt;/p&gt;

&lt;p&gt;Many subsystems have Kconfig debug options to turn on -DDEBUG in the
corresponding Makefile; in other cases specific files #define DEBUG.  And
when a debug message should be unconditionally printed, such as if it is
already inside a debug-related #ifdef section, printk(KERN_DEBUG …) can be
used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 14: Allocating memory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The kernel provides the following general purpose memory allocators:
kmalloc(), kzalloc(), kmalloc_array(), kcalloc(), vmalloc(), and
vzalloc().  Please refer to the API documentation for further information
about them.&lt;/p&gt;

&lt;p&gt;The preferred form for passing a size of a struct is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;p = kmalloc(sizeof(*p), ...);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The alternative form where struct name is spelled out hurts readability and
introduces an opportunity for a bug when the pointer variable type is changed
but the corresponding sizeof that is passed to a memory allocator is not.&lt;/p&gt;

&lt;p&gt;Casting the return value which is a void pointer is redundant. The conversion
from void pointer to any other pointer type is guaranteed by the C programming
language.&lt;/p&gt;

&lt;p&gt;The preferred form for allocating an array is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;p = kmalloc_array(n, sizeof(...), ...);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The preferred form for allocating a zeroed array is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;p = kcalloc(n, sizeof(...), ...);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both forms check for overflow on the allocation size n * sizeof(…),
and return NULL if that occurred.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 15: The inline disease
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There appears to be a common misperception that gcc has a magic “make me
faster” speedup option called “inline”. While the use of inlines can be
appropriate (for example as a means of replacing macros, see Chapter 12), it
very often is not. Abundant use of the inline keyword leads to a much bigger
kernel, which in turn slows the system as a whole down, due to a bigger
icache footprint for the CPU and simply because there is less memory
available for the pagecache. Just think about it; a pagecache miss causes a
disk seek, which easily takes 5 milliseconds. There are a LOT of cpu cycles
that can go into these 5 milliseconds.&lt;/p&gt;

&lt;p&gt;A reasonable rule of thumb is to not put inline at functions that have more
than 3 lines of code in them. An exception to this rule are the cases where
a parameter is known to be a compiletime constant, and as a result of this
constantness you &lt;em&gt;know&lt;/em&gt; the compiler will be able to optimize most of your
function away at compile time. For a good example of this later case, see
the kmalloc() inline function.&lt;/p&gt;

&lt;p&gt;Often people argue that adding inline to functions that are static and used
only once is always a win since there is no space tradeoff. While this is
technically correct, gcc is capable of inlining these automatically without
help, and the maintenance issue of removing the inline when a second user
appears outweighs the potential value of the hint that tells gcc to do
something it would have done anyway.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 16: Function return values and names
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions can return values of many different kinds, and one of the
most common is a value indicating whether the function succeeded or
failed.  Such a value can be represented as an error-code integer
(-Exxx = failure, 0 = success) or a “succeeded” boolean (0 = failure,
non-zero = success).&lt;/p&gt;

&lt;p&gt;Mixing up these two sorts of representations is a fertile source of
difficult-to-find bugs.  If the C language included a strong distinction
between integers and booleans then the compiler would find these mistakes
for us… but it doesn’t.  To help prevent such bugs, always follow this
convention:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;If the name of a function is an action or an imperative command,
the function should return an error-code integer.  If the name
is a predicate, the function should return a &quot;succeeded&quot; boolean.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, “add work” is a command, and the add_work() function returns 0
for success or -EBUSY for failure.  In the same way, “PCI device present” is
a predicate, and the pci_dev_present() function returns 1 if it succeeds in
finding a matching device or 0 if it doesn’t.&lt;/p&gt;

&lt;p&gt;All EXPORTed functions must respect this convention, and so should all
public functions.  Private (static) functions need not, but it is
recommended that they do.&lt;/p&gt;

&lt;p&gt;Functions whose return value is the actual result of a computation, rather
than an indication of whether the computation succeeded, are not subject to
this rule.  Generally they indicate failure by returning some out-of-range
result.  Typical examples would be functions that return pointers; they use
NULL or the ERR_PTR mechanism to report failure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 17:  Don&#39;t re-invent the kernel macros
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The header file include/linux/kernel.h contains a number of macros that
you should use, rather than explicitly coding some variant of them yourself.
For example, if you need to calculate the length of an array, take advantage
of the macro&lt;/p&gt;

&lt;p&gt;#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))&lt;/p&gt;

&lt;p&gt;Similarly, if you need to calculate the size of some structure member, use&lt;/p&gt;

&lt;p&gt;#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)-&amp;gt;f))&lt;/p&gt;

&lt;p&gt;There are also min() and max() macros that do strict type checking if you
need them.  Feel free to peruse that header file to see what else is already
defined that you shouldn’t reproduce in your code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 18:  Editor modelines and other cruft
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some editors can interpret configuration information embedded in source files,
indicated with special markers.  For example, emacs interprets lines marked
like this:&lt;/p&gt;

&lt;p&gt;-&lt;em&gt;- mode: c -&lt;/em&gt;-&lt;/p&gt;

&lt;p&gt;Or like this:&lt;/p&gt;

&lt;p&gt;/*
Local Variables:
compile-command: “gcc -DMAGIC_DEBUG_FLAG foo.c”
End:
*/&lt;/p&gt;

&lt;p&gt;Vim interprets markers that look like this:&lt;/p&gt;

&lt;p&gt;/* vim:set sw=8 noet */&lt;/p&gt;

&lt;p&gt;Do not include any of these in source files.  People have their own personal
editor configurations, and your source files should not override them.  This
includes markers for indentation and mode configuration.  People may use their
own custom mode, or may have some other magic method for making indentation
work correctly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Chapter 19:  Inline assembly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In architecture-specific code, you may need to use inline assembly to interface
with CPU or platform functionality.  Don’t hesitate to do so when necessary.
However, don’t use inline assembly gratuitously when C can do the job.  You can
and should poke hardware from C when possible.&lt;/p&gt;

&lt;p&gt;Consider writing simple helper functions that wrap common bits of inline
assembly, rather than repeatedly writing them with slight variations.  Remember
that inline assembly can use C parameters.&lt;/p&gt;

&lt;p&gt;Large, non-trivial assembly functions should go in .S files, with corresponding
C prototypes defined in C header files.  The C prototypes for assembly
functions should use “asmlinkage”.&lt;/p&gt;

&lt;p&gt;You may need to mark your asm statement as volatile, to prevent GCC from
removing it if GCC doesn’t notice any side effects.  You don’t always need to
do so, though, and doing so unnecessarily can limit optimization.&lt;/p&gt;

&lt;p&gt;When writing a single inline assembly statement containing multiple
instructions, put each instruction on a separate line in a separate quoted
string, and end each string except the last with \n\t to properly indent the
next instruction in the assembly output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;asm (&quot;magic %reg1, #42\n\t&quot;
     &quot;more_magic %reg2, %reg3&quot;
     : /* outputs */ : /* inputs */ : /* clobbers */);



	Appendix I: References
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The C Programming Language, Second Edition
by Brian W. Kernighan and Dennis M. Ritchie.
Prentice Hall, Inc., 1988.
ISBN 0-13-110362-8 (paperback), 0-13-110370-9 (hardback).
URL: http://cm.bell-labs.com/cm/cs/cbook/&lt;/p&gt;

&lt;p&gt;The Practice of Programming
by Brian W. Kernighan and Rob Pike.
Addison-Wesley, Inc., 1999.
ISBN 0-201-61586-X.
URL: http://cm.bell-labs.com/cm/cs/tpop/&lt;/p&gt;

&lt;p&gt;GNU manuals - where in compliance with K&amp;amp;R and this text - for cpp, gcc,
gcc internals and indent, all available from http://www.gnu.org/manual/&lt;/p&gt;

&lt;p&gt;WG14 is the international standardization working group for the programming
language C, URL: http://www.open-std.org/JTC1/SC22/WG14/&lt;/p&gt;

&lt;p&gt;Kernel CodingStyle, by greg@kroah.com at OLS 2002:
http://www.kroah.com/linux/talks/ols_2002_kernel_codingstyle_talk/html/&lt;/p&gt;

&lt;p&gt;sources&lt;/p&gt;

&lt;p&gt;[kernel coding style] : &lt;a href=&quot;https://www.kernel.org/doc/Documentation/CodingStyle&quot;&gt;https://www.kernel.org/doc/Documentation/CodingStyle&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 30 Nov 2014 08:47:57 +0800</pubDate>
        <link>http://oiolong.github.io//linux/2014/11/30/linux-kernel-coding-style.html</link>
        <guid isPermaLink="true">http://oiolong.github.io//linux/2014/11/30/linux-kernel-coding-style.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>关于centos 快速搬移用户的一些纪录</title>
        <description>&lt;p&gt;要从A服务器搬使用者到B服务器的一些方法&lt;/p&gt;

&lt;p&gt;机器作搬移，想要偷懒用比较快速的方法做搬移&lt;/p&gt;

&lt;p&gt;于是用上了rsync&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /home
rsync -av --delete ./* root@B/home/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;搬完过去后再把&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/passwd
/etc/group
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这两个档案把要的user 复制粘贴过去就好了&lt;/p&gt;

&lt;p&gt;切换过去简单测试了一下，就以为结束了&lt;/p&gt;

&lt;p&gt;后来有公司的同学反映ssh 不上去&lt;/p&gt;

&lt;p&gt;看了一下log &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# tail -f /var/log/secure
Nov 27 05:36:51 B sshd[8512]: fatal: Access denied for user jason by PAM account configuration
Nov 27 05:36:53 B sshd[8514]: fatal: Access denied for user jason by PAM account configuration
Nov 27 05:36:56 B sshd[8516]: fatal: Access denied for user jason by PAM account configuration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后来发现是 /etc/shadow 这个档案出了问题&lt;/p&gt;

&lt;p&gt;再把相对应的user 拷过来就可以运行了&lt;/p&gt;

&lt;p&gt;后来去cyberciti 查了一下，才了解到这个档案的用处。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q. Can you explain /etc/shadow file used under Linux or UNIX?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;A. /etc/shadow file stores actual password in encrypted format&lt;/em&gt;&lt;/strong&gt;
for user’s account with additional properties related to user password i.e. it stores secure user account information. All fields are separated by a colon (:) symbol. It contains one entry per line for each user listed in /etc/passwd file Generally, shadow file entry looks as follows (click to enlarge image):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.cyberciti.biz/faqs/uploaded_images/shadow-file-795497.png&quot; alt=&quot;说明&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;User name&lt;/strong&gt; : It is your login name&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Password&lt;/strong&gt; : It your encrypted password. The password should be minimum 6-8 characters long including special characters/digits&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Last password change (lastchanged)&lt;/strong&gt; : Days since Jan 1, 1970 that password was last changed&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Minimum&lt;/strong&gt; : The minimum number of days required between password changes i.e. the number of days left before the user is allowed to change his/her password&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Maximum&lt;/strong&gt; : The maximum number of days the password is valid (after that user is forced to change his/her password)
Warn : The number of days before password is to expire that user is warned that his/her password must be changed
Inactive : The number of days after password expires that account is disabled&lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;Expire&lt;/strong&gt; : days since Jan 1, 1970 that account is disabled i.e. an absolute date specifying when the login may no longer be used&lt;/p&gt;

&lt;p&gt;[serverfault.com] : &lt;a href=&quot;http://serverfault.com/questions/540004/ssh-access-denied-by-pam-account-configuration-for-one-non-root-user-but-not&quot;&gt;http://serverfault.com/questions/540004/ssh-access-denied-by-pam-account-configuration-for-one-non-root-user-but-not&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[cyberciti.biz] : &lt;a href=&quot;http://www.cyberciti.biz/faq/understanding-etcshadow-file/&quot;&gt;http://www.cyberciti.biz/faq/understanding-etcshadow-file/&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 27 Nov 2014 21:52:57 +0800</pubDate>
        <link>http://oiolong.github.io//linux/2014/11/27/move-users-to-another-server-tips.html</link>
        <guid isPermaLink="true">http://oiolong.github.io//linux/2014/11/27/move-users-to-another-server-tips.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
  </channel>
</rss>
